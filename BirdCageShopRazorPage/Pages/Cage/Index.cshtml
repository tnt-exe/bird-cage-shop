@page
@inject IHttpContextAccessor HttpContextAccessor
@model BirdCageShopRazorPage.Pages.Cage.IndexModel

@{
    ViewData["Title"] = "Index";
    var checkRole = HttpContextAccessor.HttpContext?.User.Claims.Where(c => c.Type == "scope").Any(c => c.Value.Contains("Staff") || c.Value.Contains("Admin")) ?? false;
}

@if (TempData["notification"] != null)
{
    <div id="toast-container" class="toast-container position-fixed top-2 end-0 p-3">
        <div class="toast position-relative" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="mr-auto">Notification</strong>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="toast-body">
                <text class="text-info">@TempData["notification"]</text>
            </div>
        </div>
    </div>

    <style>
        .toast {
            position: relative;
        }

            .toast .close {
                position: absolute;
                top: 0;
                right: 0.5rem;
                margin: 0.25rem;
                border: none;
                background: none;
            }
    </style>

    <script>
        $(document).ready(function () {
            $('.toast').toast('show');
        });
        $('.close').click(function () {
            $('.toast').toast('hide');
        });
        setTimeout(function () {
            $('.toast').toast('hide');
        }, 10000);
    </script>
}
@if (!checkRole)
{

    <div>
        <section class="customization">
            <h2>
                Personalize Your Bird's Paradise
                @* <i class="fa-solid fa-pen me-2" style="font-size: 24px; color:white; opacity:0.5"></i> *@
            </h2>
            <p>Make your bird's home uniquely theirs. Choose from a range of colors, sizes, and accessories to create a one-of-a-kind bird cage tailored to your feathered friend's preferences</p>
            <form method="get" asp-page="./Create">
                <button type="submit">Try now</button>
            </form>
        </section>

        <section class="product">
            <h1>Explore Our Selection</h1>

            <div class="product_item_container">
                @foreach (var item in Model.Cage)
                {
                    @if (item.Status == (int)BusinessObject.Enums.CageStatus.Available)
                    {
                        <div class="product_item">
                            @if (item.ImageUrl is null)
                            {
                                <img src="https://t3.ftcdn.net/jpg/02/48/42/64/360_F_248426448_NVKLywWqArG2ADUxDq6QprtIzsF82dMF.jpg" style="width: 100%; height: 200px" />
                            }
                            else
                            {
                                <img src="@item.ImageUrl" style="width: 100%; height: 200px" />
                            }
                            <h3>@item.CageName</h3>
                            <h5>@item.Description</h5>
                            <span>@item.CagePrice</span>
                            <button><a style="color: white; text-decoration: none" asp-page="/Cage/MakeOrder" asp-route-id="@item.CageId"><i class="fa-solid fa-plus me-2"></i>View</a></button>
                        </div>
                    }
                }
            </div>
        </section>
    </div>
}

else
{
        <div class="mx-3 justify-content-between">
            <h2 class="text-center display-3 fw-bold">List of all Cages</h2>
            <br/>
            <a asp-page="Create" class="btn btn-primary me-auto">Create</a>
        </div>
    <div class="px-3 pt-2">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>
                        <label>Preview</label>
                    </th>
                    <th class="ms-2">
                        @Html.DisplayNameFor(model => model.Cage[0].CageName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Cage[0].Status)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Cage[0].CagePrice)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Cage[0].Height)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Cage[0].Radius)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Cage[0].CageWeight)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Cage[0].Description)
                    </th>
                    <th>
                        <div>Actions</div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Cage)
                {
                    <tr class="align-middle">
                        <td style="max-width: 200px;">
                            @if (item.ImageUrl is null)
                            {
                                <img src="https://t3.ftcdn.net/jpg/02/48/42/64/360_F_248426448_NVKLywWqArG2ADUxDq6QprtIzsF82dMF.jpg"
                                     style="width: 85%; height: 16%;" />
                            }
                            else
                            {
                                <img src="@item.ImageUrl" style="width: 85%; height: 16%;" />
                            }

                        </td>
                        <td class="ms-2">
                            @Html.DisplayFor(modelItem => item.CageName)
                        </td>
                        <td>
                            @switch (item.Status!)
                            {
                                case (int)BusinessObject.Enums.CageStatus.Undefined:
                                    <span class="badge bg-dark text-white">Undefined</span>
                                    break;
                                case (int)BusinessObject.Enums.CageStatus.Unavailable:
                                    <span class="badge bg-danger">Unavailable</span>
                                    break;
                                case (int)BusinessObject.Enums.CageStatus.Available:
                                    <span class="badge bg-success">Available</span>
                                    break;
                                case (int)BusinessObject.Enums.CageStatus.Custom:
                                    <span class="badge bg-info text-dark">Custom</span>
                                    break;
                                default:
                                    <span class="badge bg-dark text-white">Undefined</span>
                                    break;
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CagePrice) đ
                        </td>
                        <td>
                            @if (item.Height is not null)
                            {
                                @Html.DisplayFor(modelItem => item.Height)
                                <text> cm</text>
                            }
                        </td>
                        <td>
                            @if (item.Radius is not null)
                            {
                                @Html.DisplayFor(modelItem => item.Radius)
                                <text> cm</text>
                            }
                        </td>
                        <td>
                            @if (item.CageWeight is not null)
                            {
                                @Html.DisplayFor(modelItem => item.CageWeight)
                                <text> kg</text>
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @if (item.Status is not null && item.Status == 1 && !checkRole)
                            {
                                <a asp-page="./MakeOrder" asp-route-id="@item.CageId" class="btn btn-sm btn-outline-info">
                                    <i class="fa-solid fa-cart-shopping" style="font-size: 24px;"></i>
                                    <span class="sr-only">Add to Cart</span>
                                </a>
                            }
                            <a class="btn btn-sm btn-outline-primary" asp-page="./Details" asp-route-id="@item.CageId">
                                <i class="fa fa-info px-1" style="font-size: 24px;"></i></a>
                            <a class="btn btn-sm btn-outline-warning" asp-page="./Edit" asp-route-id="@item.CageId">
                                <i class="fa fa-edit" style="font-size: 24px;"></i></a>
                            <a class="btn btn-sm btn-outline-danger" asp-page="./Delete" asp-route-id="@item.CageId"><i class="fa fa-trash" style="font-size: 24px;"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}