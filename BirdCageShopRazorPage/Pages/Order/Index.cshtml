@page
@model BirdCageShopRazorPage.Pages.Order.IndexModel

@if (TempData["notification"] != null)
{
    <div id="toast-container" class="toast-container position-fixed top-2 end-0 p-3">
        <div class="toast position-relative" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="mr-auto">Notification</strong>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="toast-body">
                <text class="text-info">@TempData["notification"]</text>
            </div>
        </div>
    </div>

    <style>
        .toast {
            position: relative;
        }

            .toast .close {
                position: absolute;
                top: 0;
                right: 0.5rem;
                margin: 0.25rem;
                border: none;
                background: none;
            }
    </style>

    <script>
        $(document).ready(function () {
            $('.toast').toast('show');
        });
        $('.close').click(function () {
            $('.toast').toast('hide');
        });
        setTimeout(function () {
            $('.toast').toast('hide');
        }, 10000);
    </script>
}

@if (Model.Order.Count() == 0)
{
    <div class="alert alert-danger m-0" role="alert">
        Giỏ hàng trống
    </div>

    <div>
        @if (Model.Order.Where(o => new string("Waiting").Equals(o.Status)).Count() == 0)
        {
            <form action="/Order/Create" method="post">
                @Html.AntiForgeryToken()
                <button class="button_add_cart" type="submit">
                    Add new cart
                </button>
            </form>
        }
    </div>
}
else
{
    <section class="main">
        <h2>Cart History</h2>

        <table class="table table-striped d-sm-table">
            <thead>
                <tr>
                    <th>Order Date</th>
                    <th>Payment</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Order)
                {
                    <tr class="align-middle">
                        <td>
                            @Html.DisplayFor(modelItem => item.OrderDate)
                        </td>
                        <td>
                            @switch (item.PaymentStatus!)
                            {
                                case (int)BusinessObject.Enums.PaymentStatus.None:
                                    <span class="badge bg-secondary">None</span>
                                    break;
                                case (int)BusinessObject.Enums.PaymentStatus.Unpaid:
                                    <span class="badge bg-danger">Unpaid</span>
                                    break;
                                case (int)BusinessObject.Enums.PaymentStatus.Paid:
                                    <span class="badge bg-success">Paid</span>
                                    break;
                            }
                        </td>
                        <td>
                            @switch (item.Status!)
                            {
                                case (int)BusinessObject.Enums.OrderStatus.Undefined:
                                    <span class="badge bg-dark text-white">Undefined</span>
                                    break;
                                case (int)BusinessObject.Enums.OrderStatus.Pending:
                                    <span class="badge bg-warning">Pending</span>
                                    break;
                                case (int)BusinessObject.Enums.OrderStatus.Processing:
                                    <span class="badge bg-primary">Processing</span>
                                    break;
                                case (int)BusinessObject.Enums.OrderStatus.Completed:
                                    <span class="badge bg-success">Completed</span>
                                    break;
                                case (int)BusinessObject.Enums.OrderStatus.Cancelled:
                                    <span class="badge bg-danger">Cancelled</span>
                                    break;
                                case (int)BusinessObject.Enums.OrderStatus.Waiting:
                                    <span class="badge bg-secondary">Waiting</span>
                                    break;
                                case (int)BusinessObject.Enums.OrderStatus.Custom:
                                    <span class="badge bg-secondary">Custom</span>
                                    break;
                            }
                        </td>
                        <td>
                            <a class="btn btn-sm btn-outline-primary" asp-page="./Details" asp-route-id="@item.OrderId">
                                <i class="fa fa-info px-1" style="font-size: 24px;"></i></a>
                            <a class="btn btn-sm btn-outline-danger" asp-page-handler="deleteOrder" asp-route-id="@item.OrderId">
                                <i class="fa fa-trash" style="font-size: 24px;"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>
}
