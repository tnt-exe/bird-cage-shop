@page
@model BirdCageShopRazorPage.Pages.Order.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<div class="px-3">
    <h1>Details</h1>
    <h4>Order</h4>
    <hr />
    <h3>Danh sách mặt hàng</h3>
</div>

<div class="row">
    <div class="col-7">
        @foreach (var item in Model.Order.OrderDetails)
        {
            <div class="container">
                <div class="row mt-3">
                    <div class="col-md-1"></div> <!-- Empty first 1 column -->
                    <div class="col-md-10 card">
                        <div class="card-body row">
                            <a asp-page="./Details" asp-route-id="@item.CageId" style="text-decoration: none; color: inherit;" class="row">
                                <div class="col-md-4">
                                    @if (item.Cage?.ImageUrl is null)
                                    {
                                        <img src="https://raw.githubusercontent.com/khoaLe12/Public-Image/main/cage_image.png" style="height: auto; width: 100%;">
                                    }
                                    else
                                    {
                                        <img src="@item.Cage.ImageUrl" style="height: auto; width: 100%;">
                                    }
                                </div>
                                <div class="col-md-8">
                                    <label class="ml-3 mr-3">
                                        Tên lồng: @(item.Cage?.CageName ?? "Undefined")
                                    </label><br />
                                    <label class="ml-3 mr-3">
                                        Giá mỗi đơn vị: @item.Cage?.CagePrice
                                    </label><br />
                                    <label class="ml-3">
                                        Trạng thái:
                                        @switch (item.Cage.Status)
                                        {
                                            case (int)BusinessObject.Enums.CageStatus.Undefined:
                                                <span class="badge bg-dark text-white">Undefined</span>
                                                break;
                                            case (int)BusinessObject.Enums.CageStatus.Unavailable:
                                                <span class="badge bg-danger">Unavailable</span>
                                                break;
                                            case (int)BusinessObject.Enums.CageStatus.Available:
                                                <span class="badge bg-success">Available</span>
                                                break;
                                            case (int)BusinessObject.Enums.CageStatus.Custom:
                                                <span class="badge bg-info text-dark">Custom</span>
                                                break;
                                        }
                                    </label><br />
                                    <label>
                                        Số lượng đặt: @item.Quantity
                                    </label><br />
                                    <label>
                                        Tổng: @item.Price
                                    </label><br />
                                    <button class="btn btn-danger mt-3">Remove</button>
                                </div>
                            </a>
                        </div>
                    </div>
                    <div class="col-md-1"></div> <!-- Empty last 1 column -->
                </div>
            </div>
        }
    </div>

    <div class="col-5 mt-3 pe-5 w-25 border position-relative">
        <h3 class="mt-1">Chi tiết hóa đơn</h3>
        <dl class="row mt-4">
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.Order.TotalPrice)
        </dt>
        <dd class="col-sm-8">
            @Html.DisplayFor(model => model.Order.TotalPrice)
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.Order.Status)
        </dt>
        <dd class="col-sm-8">
                @switch (Model.Order.Status!)
                {
                    case "Undefined":
                        <span class="badge bg-dark text-white">@Html.DisplayFor(modelItem => Model.Order.Status)</span>
                        break;
                    case "Pending":
                        <span class="badge bg-warning">@Html.DisplayFor(modelItem => Model.Order.Status)</span>
                        break;
                    case "Processing":
                        <span class="badge bg-primary">@Html.DisplayFor(modelItem => Model.Order.Status)</span>
                        break;
                    case "Completed":
                        <span class="badge bg-success">@Html.DisplayFor(modelItem => Model.Order.Status)</span>
                        break;
                    case "Cancelled":
                        <span class="badge bg-danger">@Html.DisplayFor(modelItem => Model.Order.Status)</span>
                        break;
                    case "Waiting":
                        <span class="badge bg-secondary">@Html.DisplayFor(modelItem => Model.Order.Status)</span>
                        break;
                }
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.Order.PaymentStatus)
        </dt>
        <dd class="col-sm-8">
                @switch (Model.Order.PaymentStatus!)
                {
                    case "None":
                        <span class="badge bg-secondary">@Html.DisplayFor(modelItem => Model.Order.PaymentStatus)</span>
                        break;
                    case "Unpaid":
                        <span class="badge bg-danger">@Html.DisplayFor(modelItem => Model.Order.PaymentStatus)</span>
                        break;
                    case "Paid":
                        <span class="badge bg-success">@Html.DisplayFor(modelItem => Model.Order.PaymentStatus)</span>
                        break;
                }
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.Order.OrderDate)
        </dt>
        <dd class="col-sm-8">
            @Html.DisplayFor(model => model.Order.OrderDate)
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.Order.ShipDate)
        </dt>
        <dd class="col-sm-8">
            @Html.DisplayFor(model => model.Order.ShipDate)
        </dd>
        </dl>
        <form method="post" class="mb-3" style="position: absolute; bottom: 0; width: 100%;">
            <button type="submit" asp-route-orderId="@Model.Order.OrderId" class="btn btn-success">Confirm</button>
        </form>
    </div>
</div>

<div class="mt-3 px-3">
    <button class="btn btn-info">Thêm Order</button>
    <a asp-page="./Index" class="btn btn-primary">Back to List</a>
</div>
